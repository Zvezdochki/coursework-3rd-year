import cv2
import gradio as gr
from ultralytics import YOLO
import numpy as np
from styles import css
import os

MODEL_PATH = "./best.pt"
model = None

try:
    model = YOLO(MODEL_PATH)
    print(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {MODEL_PATH}")
except Exception as e:
    print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ {MODEL_PATH}. –û—à–∏–±–∫–∞: {e}")
    os._exit(1)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É —Å –æ—à–∏–±–∫–æ–π

def process_frame(frame: np.ndarray, confidence_threshold: float) -> np.ndarray:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∫–∞–¥—Ä –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ YOLO.
    frame: –≤—Ö–æ–¥–Ω–æ–π –∫–∞–¥—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ NumPy array (RGB –æ—Ç Gradio).
    confidence_threshold: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π (0.0 - 1.0).
    """
    if model is None:
        error_text = "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        cv2.putText(frame, error_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2, cv2.LINE_AA)
        return frame

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã
    frame = cv2.flip(frame, 1)

    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –º–æ–¥–µ–ª—å
        results = model(frame, conf=confidence_threshold)[0]
        return results.plot()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–¥—Ä–∞: {e}")
        error_text = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞"
        cv2.putText(frame, error_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2, cv2.LINE_AA)
        return frame


with gr.Blocks(css=css, title="üö¶ AI –î–µ—Ç–µ–∫—Ç–æ—Ä", theme=gr.themes.Soft()) as demo:
    # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    gr.HTML("""
        <div class="main-header">
            <h1>üö¶ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h1>
        </div>
    """)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    with gr.Row():
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        with gr.Column(scale=1, elem_classes=["control-panel"]):
            gr.HTML("<h3 class='section-title'>üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h3>")
            
            input_img = gr.Image(
                sources=["webcam"], 
                streaming=True, 
                label="üìπ –í–µ–±-–∫–∞–º–µ—Ä–∞",
                elem_classes=["video-container"]
            )
            
            # –ü–æ–ª–∑—É–Ω–æ–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_slider = gr.Slider(
                minimum=0.0,
                maximum=1.0,
                value=0.6,
                step=0.05,
                label="üéØ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                info="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏",
                elem_classes=["confidence-slider"]
            )
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with gr.Column(scale=2, elem_classes=["control-panel"]):
            gr.HTML("<h3 class='section-title'>üñ•Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ</h3>")
            output_img = gr.Image(
                label="üé¨ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏",
                elem_classes=["video-container"]
            )
            # –§—É—Ç–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            gr.HTML("""
                <div class="info-panel">
                    <h4>üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</h4>
                    <p>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏</p>
                    <p>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π</p>
                    <p>‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É —É—Å—Ç–æ–π—á–∏–≤–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã</p>
                </div>
            """)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    input_img.stream(
        fn=process_frame,
        inputs=[input_img, confidence_slider],
        outputs=output_img,
    )

if __name__ == '__main__':
    demo.launch(inbrowser=True)