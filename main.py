import cv2
import gradio as gr
from ultralytics import YOLO
import numpy as np

MODEL_PATH = "./best.pt"
model = None

try:
    model = YOLO(MODEL_PATH)
    print(f"–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {MODEL_PATH}")
except Exception as e:
    print(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–∑ {MODEL_PATH}. –û—à–∏–±–∫–∞: {e}")

def process_frame(frame: np.ndarray, confidence_threshold: float) -> np.ndarray:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∫–∞–¥—Ä –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞ —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ YOLO.
    frame: –≤—Ö–æ–¥–Ω–æ–π –∫–∞–¥—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ NumPy array (RGB –æ—Ç Gradio).
    confidence_threshold: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π (0.0 - 1.0).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∫–∞–¥—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ NumPy array (RGB –¥–ª—è Gradio).
    """
    if model is None:
        error_text = "–û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"
        cv2.putText(frame, error_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2, cv2.LINE_AA)
        return frame

    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–∑–µ—Ä–∫–∞–ª–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –≤–µ–±-–∫–∞–º–µ—Ä—ã
    frame = cv2.flip(frame, 1)

    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –º–æ–¥–µ–ª—å
        results = model(frame, conf=confidence_threshold)[0]
        return results.plot()
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–¥—Ä–∞: {e}")
        error_text = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–∞"
        cv2.putText(frame, error_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2, cv2.LINE_AA)
        return frame

# –ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ CSS —Å—Ç–∏–ª–∏
css = """
/* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
.gradio-container {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif !important;
    background: #f8f9fa !important;
    color: #212529 !important;
}

/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */
.main-header {
    text-align: center;
    padding: 2rem 1rem;
    margin-bottom: 2rem;
    border-bottom: 1px solid #e9ecef;
}

.main-header h1 {
    font-size: 2rem;
    font-weight: 600;
    color: #495057;
    margin: 0 0 0.5rem 0;
}

.main-header p {
    font-size: 1rem;
    color: #6c757d;
    margin: 0;
}

/* –ü–∞–Ω–µ–ª–∏ */
.control-panel {
    background: white !important;
    border: 1px solid #e9ecef !important;
    border-radius: 8px !important;
    padding: 1.5rem !important;
    margin: 0 !important;
}

/* –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
.video-container {
    border: 1px solid #e9ecef !important;
    border-radius: 8px !important;
    overflow: hidden !important;
    background: white !important;
}

/* –ü–æ–ª–∑—É–Ω–æ–∫ */
.confidence-slider {
    margin: 1rem 0 !important;
}

/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å */
.info-panel {
    background: #f8f9fa !important;
    border: 1px solid #e9ecef !important;
    border-radius: 8px !important;
    padding: 1rem !important;
    margin: 1rem 0 !important;
}

.info-panel h4 {
    font-size: 0.875rem;
    font-weight: 600;
    color: #495057;
    margin: 0 0 0.5rem 0;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.info-panel ul {
    margin: 0;
    padding-left: 1rem;
}

.info-panel li {
    font-size: 0.875rem;
    color: #6c757d;
    margin-bottom: 0.25rem;
}

/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
    margin: 1rem 0;
}

.stat-card {
    background: white;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 1rem;
    text-align: center;
}

.stat-value {
    font-size: 1.25rem;
    font-weight: 600;
    color: #495057;
    display: block;
}

.stat-label {
    font-size: 0.75rem;
    color: #6c757d;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-top: 0.25rem;
}

/* –°–µ–∫—Ü–∏–∏ */
.section-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #495057;
    margin: 0 0 1rem 0;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #e9ecef;
}
"""

with gr.Blocks(css=css, title="üö¶ AI –î–µ—Ç–µ–∫—Ç–æ—Ä", theme=gr.themes.Soft()) as demo:
    # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    gr.HTML("""
        <div class="main-header">
            <h1>üö¶ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ—Ä–æ–∂–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h1>
            <p>–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YOLO</p>
        </div>
    """)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    with gr.Row():
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        with gr.Column(scale=1, elem_classes=["control-panel"]):
            gr.HTML("<h3 class='section-title'>üéÆ –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</h3>")
            
            input_img = gr.Image(
                sources=["webcam"], 
                streaming=True, 
                label="üìπ –í–µ–±-–∫–∞–º–µ—Ä–∞",
                elem_classes=["video-container"]
            )
            
            # –ü–æ–ª–∑—É–Ω–æ–∫ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_slider = gr.Slider(
                minimum=0.0,
                maximum=1.0,
                value=0.6,
                step=0.05,
                label="üéØ –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
                info="–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü–∏–∏",
                elem_classes=["confidence-slider"]
            )
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
            gr.HTML("""
                <div class="info-panel">
                    <h4>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
                    <ul>
                        <li><strong>0.1-0.3:</strong> –í—ã—Å–æ–∫–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</li>
                        <li><strong>0.4-0.6:</strong> –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º</li>
                        <li><strong>0.7-0.9:</strong> –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ –¥–µ—Ç–µ–∫—Ü–∏–∏</li>
                    </ul>
                </div>
            """)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        with gr.Column(scale=2):
            gr.HTML("<h3 class='section-title'>üñ•Ô∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ</h3>")
            output_img = gr.Image(
                label="üé¨ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏",
                elem_classes=["video-container"]
            )
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            gr.HTML("""
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-value">Real-time</div>
                        <div class="stat-label">–û–±—Ä–∞–±–æ—Ç–∫–∞</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">YOLO v8</div>
                        <div class="stat-label">–ú–æ–¥–µ–ª—å</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-value">Live</div>
                        <div class="stat-label">–°—Ç–∞—Ç—É—Å</div>
                    </div>
                </div>
            """)
    
    # –§—É—Ç–µ—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    gr.HTML("""
        <div class="info-panel" style="margin-top: 30px;">
            <h4>üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:</h4>
            <p>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏</p>
            <p>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π</p>
            <p>‚Ä¢ –î–µ—Ä–∂–∏—Ç–µ –∫–∞–º–µ—Ä—É —É—Å—Ç–æ–π—á–∏–≤–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã</p>
        </div>
    """)
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    input_img.stream(
        fn=process_frame,
        inputs=[input_img, confidence_slider],
        outputs=output_img,
    )

if __name__ == '__main__':
    demo.launch()